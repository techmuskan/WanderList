<% layout("layouts/boilerplate") -%>

<style>
  :root {
    --primary: #667eea;
    --secondary: #764ba2;
    --accent: #ffd700;
    --bg-light: #f9f9fb;
    --text-dark: #222;
  }

  body {
    font-family: "Poppins", sans-serif;
    background: var(--bg-light);
    color: var(--text-dark);
    overflow-x: hidden;
  }

  /* Hero */
  .hero {
    position: relative;
    height: 90vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(120deg, var(--primary), var(--secondary));
    overflow: hidden;
    color: white;
  }

  .hero::before {
    content: '';
    position: absolute;
    inset: 0;
    background: radial-gradient(circle at 20% 30%, rgba(255,255,255,0.1), transparent 60%),
                radial-gradient(circle at 80% 70%, rgba(255,255,255,0.15), transparent 70%);
    animation: moveGlow 10s infinite alternate ease-in-out;
  }

  @keyframes moveGlow {
    0% { transform: scale(1) translateY(0); }
    100% { transform: scale(1.1) translateY(-20px); }
  }

  .hero-content {
    position: relative;
    z-index: 2;
    text-align: center;
    padding: 2rem;
    animation: fadeInUp 1s ease-out forwards;
  }

  .hero h1 {
    font-size: clamp(2.5rem, 6vw, 4rem);
    font-weight: 800;
    margin-bottom: 1.2rem;
    letter-spacing: 1px;
  }

  .hero p {
    font-size: clamp(1rem, 2.5vw, 1.3rem);
    opacity: 0.95;
    margin-bottom: 2.5rem;
  }

  .cta-button {
    background: var(--accent);
    color: #111;
    padding: 1rem 2.8rem;
    border-radius: 50px;
    font-weight: 700;
    text-decoration: none;
    box-shadow: 0 6px 20px rgba(255,215,0,0.4);
    transition: all 0.3s ease;
  }

  .cta-button:hover {
    transform: translateY(-4px);
    background: #ffef85;
    box-shadow: 0 10px 30px rgba(255,215,0,0.6);
  }

  /* Section headers */
  .section-header {
    text-align: center;
    margin-bottom: 3.5rem;
  }

  .section-header h2 {
    font-size: clamp(2rem, 4vw, 2.8rem);
    font-weight: 700;
    margin-bottom: 0.8rem;
    color: #222;
  }

  .section-header p {
    color: #666;
    max-width: 650px;
    margin: 0 auto;
    font-size: 1.1rem;
  }

  /* About Section */
  .about-section {
    background: #fff;
    padding: 5rem 0;
  }

  .feature-card {
    background: rgba(255,255,255,0.9);
    border-radius: 20px;
    box-shadow: 0 8px 25px rgba(0,0,0,0.06);
    padding: 2.5rem;
    transition: all 0.3s ease;
    text-align: center;
    backdrop-filter: blur(10px);
  }

  .feature-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 20px 40px rgba(0,0,0,0.12);
  }

  .feature-icon {
    background: linear-gradient(135deg, var(--primary), var(--secondary));
    color: white;
    font-size: 2rem;
    border-radius: 50%;
    width: 75px;
    height: 75px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1.2rem;
    transition: transform 0.3s ease;
  }

  .feature-card:hover .feature-icon {
    transform: rotate(360deg);
  }

  .feature-card h3 {
    font-size: 1.4rem;
    font-weight: 600;
    color: #222;
    margin-bottom: 0.8rem;
  }

  .feature-card p {
    color: #555;
    line-height: 1.6;
  }

  /* Stats */
  .stats-section {
    background: linear-gradient(120deg, var(--primary), var(--secondary));
    color: #fff;
    padding: 4rem 0;
  }

  .stat-item {
    text-align: center;
    padding: 1.5rem;
  }

  .stat-item h4 {
    font-size: 3rem;
    font-weight: 800;
    margin-bottom: 0.3rem;
  }

  .stat-item p {
    font-size: 1.1rem;
    opacity: 0.9;
  }

  /* Contact */
  .contact-section {
    padding: 5rem 0;
    background: var(--bg-light);
  }

  .contact-item {
    background: white;
    padding: 1.5rem;
    border-radius: 15px;
    display: flex;
    align-items: center;
    gap: 1.2rem;
    box-shadow: 0 6px 15px rgba(0,0,0,0.06);
    transition: all 0.3s ease;
    margin-bottom: 1rem;
  }

  .contact-item:hover {
    background: linear-gradient(135deg, var(--primary), var(--secondary));
    color: white;
    transform: translateX(10px);
  }

  .contact-item i {
    font-size: 1.4rem;
  }

  .contact-item a {
    color: inherit;
    text-decoration: none;
  }

  /* Animations */
  @keyframes fadeInUp {
    from { opacity: 0; transform: translateY(30px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .scroll-reveal {
    opacity: 0;
    transform: translateY(40px);
    transition: all 0.8s ease;
  }

  .scroll-reveal.active {
    opacity: 1;
    transform: translateY(0);
  }

  @media (max-width: 768px) {
    .hero { height: 75vh; padding: 2rem; }
  }
</style>

<!-- Hero -->
<section class="hero">
  <div class="hero-content">
    <h1>Welcome to WanderList</h1>
    <p>Your all-in-one travel discovery platform — explore, share, and connect with explorers worldwide.</p>
    <a href="/listings" class="cta-button">Start Exploring</a>
  </div>
</section>

<!-- About -->
<section class="about-section">
  <div class="container">
    <div class="section-header scroll-reveal">
      <h2>Why Choose WanderList?</h2>
      <p>Experience the future of travel exploration with smart discovery, community insights, and real adventures.</p>
    </div>
    <div class="row g-4">
      <div class="col-md-4 scroll-reveal">
        <div class="feature-card">
          <div class="feature-icon"><i class="fa-solid fa-map-location-dot"></i></div>
          <h3>Smart Exploration</h3>
          <p>Use intelligent recommendations to find hidden gems and trending destinations around the world.</p>
        </div>
      </div>
      <div class="col-md-4 scroll-reveal">
        <div class="feature-card">
          <div class="feature-icon"><i class="fa-solid fa-upload"></i></div>
          <h3>Share Instantly</h3>
          <p>Post your adventures with ease and let your stories inspire thousands of travelers globally.</p>
        </div>
      </div>
      <div class="col-md-4 scroll-reveal">
        <div class="feature-card">
          <div class="feature-icon"><i class="fa-solid fa-user-group"></i></div>
          <h3>Travel Community</h3>
          <p>Join a fast-growing travel network and connect with like-minded wanderers across the globe.</p>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Stats -->
<section class="stats-section">
  <div class="container">
    <div class="row">
      <div class="col-md-4">
        <div class="stat-item">
          <h4 data-count="12000">0</h4>
          <p>Destinations</p>
        </div>
      </div>
      <div class="col-md-4">
        <div class="stat-item">
          <h4 data-count="65000">0</h4>
          <p>Happy Travelers</p>
        </div>
      </div>
      <div class="col-md-4">
        <div class="stat-item">
          <h4 data-count="200000">0</h4>
          <p>Reviews Shared</p>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Contact -->
<section class="contact-section">
  <div class="container">
    <div class="section-header scroll-reveal">
      <h2>Contact Us</h2>
      <p>Let’s make your next journey unforgettable — we’re here to assist you every step of the way.</p>
    </div>
    <div class="contact-info scroll-reveal">
      <div class="contact-item"><i class="fa-solid fa-phone"></i><a href="tel:+911234567890">+91 123-456-7890</a></div>
      <div class="contact-item"><i class="fa-solid fa-envelope"></i><a href="mailto:contact@wanderlist.com">contact@wanderlist.com</a></div>
      <div class="contact-item"><i class="fa-solid fa-location-dot"></i><span>Bhopal, Madhya Pradesh, India</span></div>
    </div>
  </div>
</section>

<script>
  // Scroll reveal
  const reveals = document.querySelectorAll('.scroll-reveal');
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) entry.target.classList.add('active');
    });
  }, { threshold: 0.15 });
  reveals.forEach(r => observer.observe(r));

  // Counter animation
  const counters = document.querySelectorAll('[data-count]');
  const runCounter = (el) => {
    const target = +el.dataset.count;
    const step = target / 120;
    const update = () => {
      let current = +el.innerText.replace(/,/g, '');
      if (current < target) {
        el.innerText = Math.ceil(current + step).toLocaleString();
        requestAnimationFrame(update);
      } else {
        el.innerText = target.toLocaleString();
      }
    };
    update();
  };
  const counterObserver = new IntersectionObserver((entries) => {
    entries.forEach(e => {
      if (e.isIntersecting) runCounter(e.target);
    });
  }, { threshold: 0.4 });
  counters.forEach(c => counterObserver.observe(c));
</script>
